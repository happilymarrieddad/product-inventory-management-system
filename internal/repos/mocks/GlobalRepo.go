// Code generated by MockGen. DO NOT EDIT.
// Source: ./globalRepo.go
//
// Generated by this command:
//
//	mockgen -source=./globalRepo.go -destination=./mocks/GlobalRepo.go -package=mock_repos GlobalRepo
//

// Package mock_repos is a generated GoMock package.
package mock_repos

import (
	reflect "reflect"

	repos "github.com/happilymarrieddad/product-inventory-management-system/internal/repos"
	gomock "go.uber.org/mock/gomock"
	xorm "xorm.io/xorm"
)

// MockGlobalRepo is a mock of GlobalRepo interface.
type MockGlobalRepo struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalRepoMockRecorder
}

// MockGlobalRepoMockRecorder is the mock recorder for MockGlobalRepo.
type MockGlobalRepoMockRecorder struct {
	mock *MockGlobalRepo
}

// NewMockGlobalRepo creates a new mock instance.
func NewMockGlobalRepo(ctrl *gomock.Controller) *MockGlobalRepo {
	mock := &MockGlobalRepo{ctrl: ctrl}
	mock.recorder = &MockGlobalRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlobalRepo) EXPECT() *MockGlobalRepoMockRecorder {
	return m.recorder
}

// DB mocks base method.
func (m *MockGlobalRepo) DB() *xorm.Engine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(*xorm.Engine)
	return ret0
}

// DB indicates an expected call of DB.
func (mr *MockGlobalRepoMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockGlobalRepo)(nil).DB))
}

// Products mocks base method.
func (m *MockGlobalRepo) Products() repos.Products {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Products")
	ret0, _ := ret[0].(repos.Products)
	return ret0
}

// Products indicates an expected call of Products.
func (mr *MockGlobalRepoMockRecorder) Products() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Products", reflect.TypeOf((*MockGlobalRepo)(nil).Products))
}
