// Code generated by MockGen. DO NOT EDIT.
// Source: ./products.go
//
// Generated by this command:
//
//	mockgen -source=./products.go -destination=./mocks/Products.go -package=mock_repos Products
//

// Package mock_repos is a generated GoMock package.
package mock_repos

import (
	context "context"
	reflect "reflect"

	repos "github.com/happilymarrieddad/product-inventory-management-system/internal/repos"
	types "github.com/happilymarrieddad/product-inventory-management-system/types"
	gomock "go.uber.org/mock/gomock"
	xorm "xorm.io/xorm"
)

// MockProducts is a mock of Products interface.
type MockProducts struct {
	ctrl     *gomock.Controller
	recorder *MockProductsMockRecorder
}

// MockProductsMockRecorder is the mock recorder for MockProducts.
type MockProductsMockRecorder struct {
	mock *MockProducts
}

// NewMockProducts creates a new mock instance.
func NewMockProducts(ctrl *gomock.Controller) *MockProducts {
	mock := &MockProducts{ctrl: ctrl}
	mock.recorder = &MockProductsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducts) EXPECT() *MockProductsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProducts) Create(ctx context.Context, newProduct types.NewProduct) (*types.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, newProduct)
	ret0, _ := ret[0].(*types.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProductsMockRecorder) Create(ctx, newProduct any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProducts)(nil).Create), ctx, newProduct)
}

// CreateTx mocks base method.
func (m *MockProducts) CreateTx(ctx context.Context, tx *xorm.Session, newProduct types.NewProduct) (*types.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTx", ctx, tx, newProduct)
	ret0, _ := ret[0].(*types.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockProductsMockRecorder) CreateTx(ctx, tx, newProduct any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockProducts)(nil).CreateTx), ctx, tx, newProduct)
}

// Destroy mocks base method.
func (m *MockProducts) Destroy(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockProductsMockRecorder) Destroy(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockProducts)(nil).Destroy), ctx, id)
}

// DestroyTx mocks base method.
func (m *MockProducts) DestroyTx(ctx context.Context, tx *xorm.Session, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyTx", ctx, tx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyTx indicates an expected call of DestroyTx.
func (mr *MockProductsMockRecorder) DestroyTx(ctx, tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyTx", reflect.TypeOf((*MockProducts)(nil).DestroyTx), ctx, tx, id)
}

// Find mocks base method.
func (m *MockProducts) Find(ctx context.Context, opts *repos.ProductsFind) ([]*types.Product, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, opts)
	ret0, _ := ret[0].([]*types.Product)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Find indicates an expected call of Find.
func (mr *MockProductsMockRecorder) Find(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockProducts)(nil).Find), ctx, opts)
}

// FindTx mocks base method.
func (m *MockProducts) FindTx(ctx context.Context, tx *xorm.Session, opts *repos.ProductsFind) ([]*types.Product, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTx", ctx, tx, opts)
	ret0, _ := ret[0].([]*types.Product)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindTx indicates an expected call of FindTx.
func (mr *MockProductsMockRecorder) FindTx(ctx, tx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTx", reflect.TypeOf((*MockProducts)(nil).FindTx), ctx, tx, opts)
}

// Get mocks base method.
func (m *MockProducts) Get(ctx context.Context, id int64) (*types.Product, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*types.Product)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockProductsMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProducts)(nil).Get), ctx, id)
}

// GetTx mocks base method.
func (m *MockProducts) GetTx(ctx context.Context, tx *xorm.Session, id int64) (*types.Product, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTx", ctx, tx, id)
	ret0, _ := ret[0].(*types.Product)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTx indicates an expected call of GetTx.
func (mr *MockProductsMockRecorder) GetTx(ctx, tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTx", reflect.TypeOf((*MockProducts)(nil).GetTx), ctx, tx, id)
}

// Update mocks base method.
func (m *MockProducts) Update(ctx context.Context, diff *types.UpdateProduct) (*types.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, diff)
	ret0, _ := ret[0].(*types.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProductsMockRecorder) Update(ctx, diff any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProducts)(nil).Update), ctx, diff)
}

// UpdateTx mocks base method.
func (m *MockProducts) UpdateTx(ctx context.Context, tx *xorm.Session, diff *types.UpdateProduct) (*types.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTx", ctx, tx, diff)
	ret0, _ := ret[0].(*types.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTx indicates an expected call of UpdateTx.
func (mr *MockProductsMockRecorder) UpdateTx(ctx, tx, diff any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTx", reflect.TypeOf((*MockProducts)(nil).UpdateTx), ctx, tx, diff)
}
